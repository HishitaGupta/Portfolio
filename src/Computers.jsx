// import * as THREE from 'three'
// import { useMemo, useContext, createContext, useRef, useEffect, useState } from 'react'
// import { useFrame } from '@react-three/fiber'
// import { useGLTF, Merged, RenderTexture, PerspectiveCamera, Text, Html } from '@react-three/drei'
// import { SpinningBox } from './screens/SpinningBox'
// import { BoxHelper } from 'three'
// import React from 'react';
// import { Canvas, useThree } from '@react-three/fiber';

// import * as dat from 'dat.gui'
// import gsap from 'gsap'
// // import React, { useState } from 'react';
// import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
// import { ScreenText } from './screens/ScreenText'
// import { Screen } from './screens/Screen'
// import { AboutScreen } from './screens/AboutScreen'
// import { ProjectScreen } from './screens/ProjectScreen'
// import { ServicesScreen } from './screens/ServicesScreen'
// import { ExperienceScreen } from './screens/ExperienceScreen'
// import { AchievementsScreen } from './screens/AchievementsScreen'
// import { HobbiesScreen } from './screens/HobbiesScreen'
// import { ScreenInteractive } from './screens/ScreenInteractive'
// import { Robot } from './Telephone'



// THREE.ColorManagement.legacyMode = false

// /*
// The following was auto-generated by: npx gltfjsx computers.glb --transform --instance
// By using the --instance flag it detects similar geometry and instances it, thereby minimizing draw-calls

// Author: Rafael Rodrigues (https://sketchfab.com/RafaelBR873D)
// License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
// Source: https://sketchfab.com/3d-models/old-computers-7bb6e720499a467b8e0427451d180063
// Title: Old Computers
// */

// const context = createContext()
// export function Instances({ children, ...props }) {
//     const { nodes } = useGLTF('/computers_1-transformed.glb')

//     const instances = useMemo(
//         () => ({
//             Object: nodes.Object_4,
//             Object1: nodes.Object_16,
//             Object3: nodes.Object_52,
//             Object13: nodes.Object_172,
//             Object14: nodes.Object_174,
//             Object23: nodes.Object_22,
//             Object24: nodes.Object_26,
//             Object32: nodes.Object_178,
//             Object36: nodes.Object_28,
//             Object45: nodes.Object_206,
//             Object46: nodes.Object_207,
//             Object47: nodes.Object_215,
//             Object48: nodes.Object_216,
//             Sphere: nodes.Sphere
//         }),
//         [nodes]
//     )

//     // useEffect(() => {
//     //     console.log("nodes", nodes);
//     //     console.log("instances", instances)

//     // }, [])



//     return (
//         <Merged castShadow receiveShadow meshes={instances} {...props}>
//             {(instances) => <context.Provider value={instances} children={children} />}
//         </Merged>
//     )
// }

// export function Computers(props) {
//     const { nodes: n, materials: m } = useGLTF('/computers_1-transformed.glb')
//     const instances = useContext(context)
//     const { camera } = useThree()

//     const handleClick = (event, targetPos, targetRot, targetFov = 45, screenName) => {
//         event.stopPropagation();

//         window.dispatchEvent(new CustomEvent('changeScreen', {
//             detail: {
//                 position: targetPos,
//                 rotation: targetRot,
//                 fov: targetFov,
//                 screenName: screenName
//             }
//         }));

//         gsap.to(camera.rotation, {
//             x: targetRot[0],
//             y: targetRot[1],
//             z: targetRot[2],
//             duration: 1,
//             ease: "power2.inOut"
//         });

//         gsap.to(camera.position, {
//             x: targetPos[0],
//             y: targetPos[1],
//             z: targetPos[2],
//             duration: 1,
//             ease: "power2.inOut"
//         });

//         gsap.to(camera, {
//             fov: targetFov,
//             duration: 1,
//             ease: "power2.inOut",
//             onUpdate: () => {
//                 camera.updateProjectionMatrix();
//             }
//         });
//     }

//     // useEffect(() => {
//     //     const gui = new dat.GUI();

//     //     // Add camera position controls
//     //     const cameraFolder = gui.addFolder('Camera');
//     //     cameraFolder.add(camera.position, 'x', -5, 5, 0.1).name('Position X');
//     //     cameraFolder.add(camera.position, 'y', -10, 10, 0.1).name('Position Y');
//     //     cameraFolder.add(camera.position, 'z', -5, 10, 0.1).name('Position Z');

//     //     // Add camera rotation controls
//     //     cameraFolder.add(camera.rotation, 'x', -Math.PI, Math.PI, 0.1).name('Rotation X').listen();
//     //     cameraFolder.add(camera.rotation, 'y', -Math.PI, Math.PI, 0.1).name('Rotation Y').listen();
//     //     cameraFolder.add(camera.rotation, 'z', -Math.PI, Math.PI, 0.1).name('Rotation Z').listen();

//     //     // Add camera FOV control
//     //     cameraFolder.add(camera, 'fov', 0, 120).name('FOV').onChange(() => {
//     //         camera.updateProjectionMatrix();
//     //     });

//     //     cameraFolder.open();

//     //     return () => {
//     //         gui.destroy(); // Clean up on unmount
//     //     };
//     // }, [camera]);

//     // Add event listener for screen changes
//     useEffect(() => {
//         const handleScreenChange = (event) => {
//             const { position, rotation, fov } = event.detail;

//             // Animate camera position
//             gsap.to(camera.position, {
//                 x: position[0],
//                 y: position[1],
//                 z: position[2],
//                 duration: 1,
//                 ease: "power2.inOut"
//             });

//             // Animate camera rotation
//             gsap.to(camera.rotation, {
//                 x: rotation[0],
//                 y: rotation[1],
//                 z: rotation[2],
//                 duration: 1,
//                 ease: "power2.inOut"
//             });

//             // Animate camera FOV
//             gsap.to(camera, {
//                 fov: fov,
//                 duration: 1,
//                 ease: "power2.inOut",
//                 onUpdate: () => {
//                     camera.updateProjectionMatrix();
//                 }
//             });
//         };

//         window.addEventListener('changeScreen', handleScreenChange);
//         return () => window.removeEventListener('changeScreen', handleScreenChange);
//     }, [camera]);

//     // console.log("instances", instances);


//     return (
//         <group {...props} dispose={null}>
//             <instances.Object position={[0.16, 0.79, -1.97]} rotation={[-0.54, 0.93, -1.12]} scale={0.5} />
//             <instances.Object position={[-2.79, 0.27, 1.82]} rotation={[-1.44, 1.22, 1.43]} scale={0.5} />
//             <instances.Object position={[-5.6, 4.62, -0.03]} rotation={[-1.96, 0.16, 1.2]} scale={0.5} />
//             <instances.Object position={[2.62, 1.98, -2.47]} rotation={[-0.42, -0.7, -1.85]} scale={0.5} />
//             <instances.Object position={[4.6, 3.46, 1.19]} rotation={[-1.24, -0.72, 0.48]} scale={0.5} />
//             <instances.Object1 position={[0.63, 0, -3]} rotation={[0, 0.17, 0]} scale={1.52} />
//             <instances.Object1 position={[-2.36, 0.32, -2.02]} rotation={[0, 0.53, -Math.PI / 2]} scale={1.52} />
//             <mesh castShadow receiveShadow geometry={n.Object_24.geometry} material={m.Texture} position={[-2.42, 0.94, -2.25]} rotation={[0, 0.14, Math.PI / 2]} scale={-1.52} />
//             <instances.Object1 position={[-3.53, 0, 0.59]} rotation={[Math.PI, -1.09, Math.PI]} scale={1.52} />
//             <instances.Object1 position={[-3.53, 1.53, 0.59]} rotation={[0, 0.91, 0]} scale={1.52} />
//             <instances.Object1 position={[3.42, 0, 0]} rotation={[-Math.PI, 1.13, -Math.PI]} scale={1.52} />
//             <instances.Object1 position={[4.09, 2.18, 2.41]} rotation={[0, -1.55, 1.57]} scale={1.52} />
//             <instances.Object3 position={[4.31, 1.57, 2.34]} rotation={[0, -1.15, -Math.PI / 2]} scale={-1.52} />
//             <instances.Object3 position={[-3.79, 0, 1.66]} rotation={[Math.PI, -1.39, 0]} scale={-1.52} />
//             <instances.Object3 position={[-3.79, 1.53, 1.66]} rotation={[0, 1.22, -Math.PI]} scale={-1.52} />
//             <instances.Object1 position={[-3.69, 0, 2.59]} rotation={[0, -1.57, 0]} scale={1.52} />
//             <instances.Object1 position={[-5.36, 2.18, 0.81]} rotation={[0, 0.77, Math.PI / 2]} scale={1.52} />
//             <instances.Object3 position={[-5.56, 1.57, 0.69]} rotation={[0, 1.17, -Math.PI / 2]} scale={-1.52} />
//             <instances.Object1 position={[-5.47, 2.79, 0.74]} rotation={[Math.PI, -1.16, Math.PI / 2]} scale={1.52} />
//             <instances.Object3 position={[-5.29, 3.41, 0.89]} rotation={[Math.PI, -0.76, -Math.PI / 2]} scale={-1.52} />
//             <instances.Object1 position={[-5.28, 0, -2.33]} rotation={[0, 0.75, 0]} scale={1.52} />
//             <instances.Object1 position={[-5.49, 0, -1.38]} rotation={[Math.PI, -0.99, Math.PI]} scale={1.52} />
//             <instances.Object1 position={[-3.01, 0, -3.79]} rotation={[0, 0.6, 0]} scale={1.52} />
//             <instances.Object1 position={[-2.08, 0, -4.32]} rotation={[Math.PI, -0.6, Math.PI]} scale={1.52} />
//             <instances.Object1 position={[-1.02, 0, -4.49]} rotation={[0, 0.31, 0]} scale={1.52} />
//             <instances.Object1 position={[-5.31, 1.83, -1.41]} rotation={[0, 1.06, Math.PI / 2]} scale={1.52} />
//             <instances.Object1 position={[-4.18, 1.83, -3.06]} rotation={[-Math.PI, -0.46, -Math.PI / 2]} scale={1.52} />
//             <instances.Object1 position={[-1.76, 1.83, -3.6]} rotation={[0, -1.16, Math.PI / 2]} scale={1.52} />
//             <instances.Object1 position={[-0.25, 1.83, -5.54]} rotation={[0, 1.55, 1.57]} scale={1.52} />
//             <instances.Object1 position={[-5.28, 2.14, -2.33]} rotation={[Math.PI, -0.75, Math.PI]} scale={1.52} />
//             <instances.Object1 position={[-5.49, 2.14, -1.38]} rotation={[0, 0.99, 0]} scale={1.52} />
//             <instances.Object1 position={[-3.01, 2.14, -3.79]} rotation={[Math.PI, -0.6, Math.PI]} scale={1.52} />
//             <instances.Object1 position={[-2.08, 2.14, -4.32]} rotation={[0, 0.6, 0]} scale={1.52} />
//             <instances.Object1 position={[-1.02, 2.14, -4.49]} rotation={[Math.PI, -0.31, Math.PI]} scale={1.52} />
//             <instances.Object1 position={[-5.31, 3.98, -1.41]} rotation={[0, 1.06, Math.PI / 2]} scale={1.52} />
//             <instances.Object1 position={[-4.18, 3.98, -3.06]} rotation={[-Math.PI, -0.46, -Math.PI / 2]} scale={1.52} />
//             <instances.Object1 position={[-1.17, 3.98, -4.45]} rotation={[0, 0.17, Math.PI / 2]} scale={1.52} />
//             <instances.Object1 position={[-0.94, 3.98, -4.66]} rotation={[Math.PI, 0.02, -Math.PI / 2]} scale={1.52} />
//             <mesh castShadow receiveShadow geometry={n.Object_140.geometry} material={m.Texture} position={[5.53, 2.18, 0.17]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_144.geometry} material={m.Texture} position={[5.74, 1.57, 0.05]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_148.geometry} material={m.Texture} position={[5.65, 2.79, 0.11]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_152.geometry} material={m.Texture} position={[5.46, 3.41, 0.26]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_156.geometry} material={m.Texture} position={[4.86, 0, -2.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_160.geometry} material={m.Texture} position={[5.06, 0, -1.6]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_164.geometry} material={m.Texture} position={[2.59, 0, -4]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_168.geometry} material={m.Texture} position={[1.66, 0, -4.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_170.geometry} material={m.Texture} position={[0.59, 0, -4.7]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <instances.Object13 position={[4.89, 1.83, -1.62]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <instances.Object14 position={[3.75, 1.83, -3.28]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_176.geometry} material={m.Texture} position={[1.33, 1.83, -3.82]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_180.geometry} material={m.Texture} position={[4.86, 2.14, -2.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_184.geometry} material={m.Texture} position={[5.06, 2.14, -1.6]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_188.geometry} material={m.Texture} position={[2.59, 2.14, -4]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_192.geometry} material={m.Texture} position={[1.66, 2.14, -4.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_194.geometry} material={m.Texture} position={[0.59, 2.14, -4.7]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <instances.Object13 position={[4.89, 3.98, -1.62]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <instances.Object14 position={[3.75, 3.98, -3.28]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_200.geometry} material={m.Texture} position={[0.75, 3.98, -4.66]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_18.geometry} material={m.Texture} position={[-0.19, 0, -2.96]} rotation={[0, -0.06, 0]} scale={1.52} />
//             <instances.Object23 position={[-2.29, 1.56, -2.26]} rotation={[0, -0.005, -Math.PI / 2]} scale={1.52} />
//             <instances.Object24 position={[-2.19, 2.19, -1.87]} rotation={[0, 0.51, Math.PI / 2]} scale={-1.52} />
//             <instances.Object23 position={[-2.9, 0.3, -1.47]} rotation={[Math.PI, -1.35, Math.PI / 2]} scale={1.52} />
//             <instances.Object23 position={[3.22, 0, -0.8]} rotation={[0, -1.32, 0]} scale={1.52} />
//             <instances.Object23 position={[3.53, 1.83, 0.44]} rotation={[-Math.PI, 1.32, Math.PI / 2]} scale={1.52} />
//             <instances.Object23 position={[4.26, 0.94, 2.22]} rotation={[0, -1, Math.PI / 2]} scale={1.52} />
//             <instances.Object24 position={[3.87, 0.32, 2.35]} rotation={[0, -1.53, -1.57]} scale={-1.52} />
//             <instances.Object23 position={[-5.61, 0.94, 0.82]} rotation={[0, 1.32, 1.57]} scale={1.52} />
//             <instances.Object24 position={[-5.26, 0.32, 1.01]} rotation={[0, 0.79, -Math.PI / 2]} scale={-1.52} />
//             <instances.Object23 position={[-5.39, 4.03, 0.99]} rotation={[Math.PI, -0.61, Math.PI / 2]} scale={1.52} />
//             <instances.Object24 position={[-5.7, 4.66, 0.72]} rotation={[Math.PI, -1.13, -Math.PI / 2]} scale={-1.52} />
//             <instances.Object23 position={[-5.95, 0, -0.64]} rotation={[0, 0.95, 0]} scale={1.52} />
//             <instances.Object23 position={[-4.48, 0, -2.75]} rotation={[Math.PI, -0.57, Math.PI]} scale={1.52} />
//             <instances.Object23 position={[-3.72, 0, -2.89]} rotation={[0, 0.64, 0]} scale={1.52} />
//             <instances.Object23 position={[-0.08, 0, -5.03]} rotation={[Math.PI, -0.04, Math.PI]} scale={1.52} />
//             <instances.Object24 position={[-4.19, 1.84, -2.77]} rotation={[Math.PI, -0.66, -Math.PI / 2]} scale={-1.52} />
//             <instances.Object23 position={[-5.95, 2.14, -0.64]} rotation={[Math.PI, -0.95, Math.PI]} scale={1.52} />
//             <instances.Object23 position={[-4.48, 2.14, -2.75]} rotation={[0, 0.57, 0]} scale={1.52} />
//             <instances.Object23 position={[-3.73, 2.14, -3.1]} rotation={[Math.PI, -0.64, Math.PI]} scale={1.52} />
//             <instances.Object23 position={[-0.08, 2.14, -5.03]} rotation={[0, 0.04, 0]} scale={1.52} />
//             <instances.Object24 position={[-4.19, 3.98, -2.77]} rotation={[Math.PI, -0.66, -Math.PI / 2]} scale={-1.52} />
//             <mesh castShadow receiveShadow geometry={n.Object_142.geometry} material={m.Texture} position={[5.79, 0.94, 0.18]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_146.geometry} material={m.Texture} position={[5.43, 0.32, 0.37]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_150.geometry} material={m.Texture} position={[5.56, 4.03, 0.35]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_154.geometry} material={m.Texture} position={[5.87, 4.66, 0.08]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_158.geometry} material={m.Texture} position={[5.53, 0, -0.85]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_162.geometry} material={m.Texture} position={[4.05, 0, -2.96]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_166.geometry} material={m.Texture} position={[3.29, 0, -3.1]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <instances.Object32 position={[3.77, 1.84, -2.98]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_182.geometry} material={m.Texture} position={[5.53, 2.14, -0.85]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_186.geometry} material={m.Texture} position={[4.05, 2.14, -2.96]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <mesh castShadow receiveShadow geometry={n.Object_190.geometry} material={m.Texture} position={[3.3, 2.14, -3.31]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <instances.Object32 position={[3.77, 3.98, -2.98]} rotation={[-Math.PI, 0, 0]} scale={-1} />
//             <instances.Object36 position={[0.35, 2.35, -3.34]} rotation={[-0.26, 0, 0]} />
//             <instances.Object36 position={[0.18, 2.8, -2.85]} rotation={[0.09, 0.15, -0.005]} />
//             <instances.Object36 position={[1.89, 0, -1.94]} rotation={[0, -0.44, 0]} scale={[1.5, 1, 1.5]} />
//             <instances.Object36 position={[1.86, 1.61, -1.81]} rotation={[0, -Math.PI / 3, 0]} />
//             <instances.Object36 position={[3.95, 2.49, 1.61]} rotation={[0, -Math.PI / 3, 0]} />
//             <instances.Object36 position={[-1.1, 4.29, -4.43]} rotation={[0, 0.36, 0]} />
//             <instances.Object36 position={[-5.25, 4.29, -1.47]} rotation={[0, 1.25, 0]} />
//             <mesh castShadow receiveShadow geometry={n.Object_204.geometry} material={m.Texture} position={[3.2, 4.29, -3.09]} rotation={[-Math.PI, 0.56, 0]} scale={-1} />
//             <AboutScreen 
//                 frame="Object_206" 
//                 panel="Object_207" 
//                 position={[0.27, 1.53, -2.61]} 
//                 onClick={(e) => handleClick(e, [0.1, 0.15, 0.89], [0, -0.01, 0], 45, 'About')}
//                 htmlPos={[0.3, -0.8, 0]}
//             />

//             <ProjectScreen 
//                 frame="Object_209" 
//                 panel="Object_210" 
//                 y={5} 
//                 position={[-1.43, 2.5, -1.8]} 
//                 rotation={[0, 1, 0]} 
//                 onClick={(e) => handleClick(e, [0.4, 0.5, 0.5], [0, 1.1, 0], 45, 'Projects')}
//                 htmlPos={[-1.7, 0.6, 0]} 
//                 htmlRot={[0, -0.1, 0]}
//             />

//             <ServicesScreen 
//                 invert 
//                 frame="Object_212" 
//                 panel="Object_213" 
//                 x={-5} 
//                 y={5} 
//                 position={[-2.73, 0.63, -0.52]} 
//                 rotation={[0, 1.09, 0]} 
//                 onClick={(e) => handleClick(e, [-0.1, -0.4, 1.4], [0, 1.09, 0], 30, 'Services')}
//                 htmlPos={[0, 0.2, 1.4]} 
//                 htmlRot={[0, 0, 0]}
//             />

//             <ExperienceScreen 
//                 frame="Object_215" 
//                 panel="Object_216" 
//                 position={[1.84, 0.38, -1.77]} rotation={[0, -Math.PI / 9, 0]}
//                 onClick={(e) => handleClick(e, [0.4, -0.5, 1.5], [0, -0.4, 0], 30, 'Experience')}
//                 htmlPos={[-0.6, 0, 1.8]} 
//                 htmlRot={[0, 0, 0]}
//             />

//             <AchievementsScreen 
//                 frame="Object_218" 
//                 panel="Object_219" 
//                 x={-5} position={[3.11, 2.15, -0.18]} rotation={[0, -0.79, 0]} scale={0.81}
//                 onClick={(e) => handleClick(e, [0.4, 0.3, 2.1], [0, -0.8, 0], 20, 'Achievements')}
//                 htmlPos={[-0.7, 0.3, 1.7]} 
//                 htmlRot={[0, 0, 0]}
//             />

//             <HobbiesScreen 
//                 frame="Object_221" 
//                 panel="Object_222" 
//                 y={5} position={[-3.42, 3.06, 1.3]} rotation={[0, 1.22, 0]} scale={0.9}
//                 onClick={(e) => handleClick(e, [-0.2, 0.8, 2.1], [0, 1.3, 0], 23, 'Hobbies')}
//                 htmlPos={[0.4, 0.1, 0]} 
//                 htmlRot={[0, 0, 0]} 
//                 htmlScale={1.2}
//             />

//             <ScreenText 
//                 frame="Object_224" 
//                 panel="Object_225" 
//                 position={[-3.9, 4.29, -2.64]} 
//                 rotation={[0, 0.54, 0]}
//                 onClick={(e) => handleClick(e, [-1, 1.5, 1.5], [0, 0.5, 0], 20, 'ScreenText')}
//             />

//             <ScreenInteractive 
//                 frame="Object_227" 
//                 panel="Object_228" 
//                 position={[0.96, 4.28, -4.2]} 
//                 rotation={[0, -0.65, 0]}
//                 onClick={(e) => handleClick(e, [0.4, 1.4, 0.2], [0, -0.1, 0], 31, 'ScreenInteractive')}
//             />

//             <ScreenText 
//                 frame="Object_230" 
//                 panel="Object_231" 
//                 position={[4.68, 4.29, -1.56]} 
//                 rotation={[0, -Math.PI / 3, 0]}
//                 onClick={(e) => handleClick(e, [-1.3, 1.4, 2.1], [0, -1.1, 0], 10, 'ScreenText')}
//             />

//             <Leds instances={instances} />
//             <Robot
//           position={[0.1, 0.2, 1]}
//           scale={0.9}
//           rotation={[0, 0, 0]}
//         />
//         </group>
//     )
// }



// // function ScreenTextScreen(props) {
// //     const textRef = useRef()
// //     const [showHtml, setShowHtml] = useState(false)
// //     const [htmlPosition, setHtmlPosition] = useState({ x: 0, y: 0, z: 0 })
// //     const [htmlRotation, setHtmlRotation] = useState({ x: 0, y: 0, z: 0 })
// //     const [htmlScale, setHtmlScale] = useState(1)
// //     const [isTransitioning, setIsTransitioning] = useState(false)

// //     useEffect(() => {
// //         if (showHtml) {
// //             const gui = new dat.GUI({ name: 'HTML Controls' });

// //             const posFolder = gui.addFolder('HTML Position');

// //             posFolder.add(htmlPosition, 'x', -3, 3, 0.1).onChange((value) => {
// //                 setHtmlPosition(prev => ({ ...prev, x: value }));
// //             });
// //             posFolder.add(htmlPosition, 'y', -3, 3, 0.1).onChange((value) => {
// //                 setHtmlPosition(prev => ({ ...prev, y: value }));
// //             });
// //             posFolder.add(htmlPosition, 'z', -3, 3, 0.1).onChange((value) => {
// //                 setHtmlPosition(prev => ({ ...prev, z: value }));
// //             });

// //             const scaleFolder = gui.addFolder('HTML Scale');
// //             scaleFolder.add({ scale: htmlScale }, 'scale', 0.1, 3, 0.1).onChange((value) => {
// //                 setHtmlScale(value);
// //             });

// //             posFolder.open();
// //             scaleFolder.open();

// //             return () => {
// //                 gui.destroy();
// //             };
// //         }
// //     }, [showHtml]);

// //     const handleScreenClick = (e) => {
// //         if (!isTransitioning) {
// //             setIsTransitioning(true);
// //             if (props.onClick) {
// //                 props.onClick(e);
// //                 setTimeout(() => {
// //                     setShowHtml(true);
// //                     setIsTransitioning(false);
// //                 }, 1000);
// //             }
// //         }
// //     };

// //     useFrame((state) => {
// //         if (!showHtml && textRef.current) {
// //             const rand = Math.random() * 10000;
// //             textRef.current.position.x = props.x + Math.sin(rand + state.clock.elapsedTime / 4) * 8;
// //         }
// //     });

// //     return (
// //         <Screen {...props} onClick={handleScreenClick}>
// //             <PerspectiveCamera makeDefault manual aspect={1 / 1} position={[0, 0, 15]} />
// //             <color attach="background" args={['black']} />
// //             {showHtml ? (
// //                 <group>
// //                     <Html
// //                         transform
// //                         scale={htmlScale}
// //                         position={props.htmlPos || [htmlPosition.x, htmlPosition.y, htmlPosition.z]}
// //                         style={{
// //                             width: '245px',
// //                             height: '180px',
// //                             display: 'flex',
// //                             flexDirection: 'column',
// //                             alignItems: 'center',
// //                             justifyContent: 'center',
// //                             background: 'rgba(255, 255, 255, 0.1)',
// //                             backdropFilter: 'blur(8px)',
// //                             transformOrigin: 'center',
// //                             borderRadius: '10px',
// //                             border: '2px solid white',
// //                             mixBlendMode: 'difference',
// //                         }}
// //                     >
// //                         <div style={{
// //                             textAlign: 'center',
// //                             color: '#FF6F61',
// //                             fontSize: '4px',
// //                             padding: '2px',
// //                         }}>
// //                             <h2 style={{ margin: '0 0 2px 0', fontSize: '4px' }}>Hishita Gupta About</h2>
// //                             <p style={{ margin: '0 0 3px 0', fontSize: '8px' }}>Full Stack Developer</p>
// //                             <div style={{ display: 'flex', gap: '2px', justifyContent: 'center' }}>
// //                                 <a
// //                                     href="https://github.com/yourusername"
// //                                     target="_blank"
// //                                     rel="noopener noreferrer"
// //                                     style={{
// //                                         color: 'white',
// //                                         textDecoration: 'none',
// //                                         border: '2px solid white',
// //                                         borderRadius: '8px',
// //                                         fontSize: '6px'
// //                                     }}
// //                                 >
// //                                     GitHub
// //                                 </a>
// //                                 <a
// //                                     href="https://linkedin.com/in/yourusername"
// //                                     target="_blank"
// //                                     rel="noopener noreferrer"
// //                                     style={{
// //                                         color: 'white',
// //                                         textDecoration: 'none',
// //                                         border: '2px solid white',
// //                                         padding: '1px 3px',
// //                                         borderRadius: '8px',
// //                                         fontSize: '3px'
// //                                     }}
// //                                 >
// //                                     LinkedIn
// //                                 </a>
// //                             </div>
// //                         </div>
// //                     </Html>
// //                 </group>
// //             ) : (
// //                 <>
// //                     <ambientLight intensity={0.5} />
// //                     <directionalLight position={[10, 10, 5]} />
// //                     <Text 
// //                         font="/Inter-Medium.woff" 
// //                         position={[0, 1.2, 0]} 
// //                         fontSize={2} 
// //                         letterSpacing={-0.1} 
// //                         color={'white'}
// //                         ref={textRef}
// //                     >
// //                         Hishita Gupta
// //                     </Text>
// //                 </>
// //             )}
// //         </Screen>
// //     )
// // }


// // Renders flashing LED's
// function Leds({ instances }) {
//     const ref = useRef()
//     const { nodes } = useGLTF('/computers_1-transformed.glb')
//     useMemo(() => {
//         nodes.Sphere.material = new THREE.MeshBasicMaterial()
//         nodes.Sphere.material.toneMapped = false
//     }, [])
//     useFrame((state) => {
//         ref.current.children.forEach((instance) => {
//             const rand = Math.abs(2 + instance.position.x)
//             const t = Math.round((1 + Math.sin(rand * 10000 + state.clock.elapsedTime * rand)) / 2)
//             instance.color.setRGB(0, t * 1.1, t)
//         })
//     })
//     return (
//         <group ref={ref}>
//             <instances.Sphere position={[-0.41, 1.1, -2.21]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[0.59, 1.32, -2.22]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[1.77, 1.91, -1.17]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[2.44, 1.1, -0.79]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[4.87, 3.8, -0.1]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[1.93, 3.8, -3.69]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[-2.35, 3.8, -3.48]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[-4.71, 4.59, -1.81]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[-3.03, 2.85, 1.19]} scale={0.005} color={[1, 2, 1]} />
//             <instances.Sphere position={[-1.21, 1.73, -1.49]} scale={0.005} color={[1, 2, 1]} />
//         </group>
//     )
// }








import * as THREE from 'three'
import { useMemo, useContext, createContext, useRef, useEffect, useState, useCallback } from 'react'
import { useFrame } from '@react-three/fiber'
import { useGLTF, Merged, RenderTexture, PerspectiveCamera, Text } from '@react-three/drei'
import React from 'react'
import { useThree } from '@react-three/fiber'
import * as dat from 'dat.gui'
import gsap from 'gsap'
// import React, { useState } from 'react';
import { BrowserRouter as Router, Routes, Route, Link } from 'react-router-dom';
import { ScreenText } from './screens/ScreenText'
import { Screen } from './screens/Screen'
import { AboutScreen } from './screens/AboutScreen'
import { ProjectScreen } from './screens/ProjectScreen'
import { ServicesScreen } from './screens/ServicesScreen'
import { ExperienceScreen } from './screens/ExperienceScreen'
import { AchievementsScreen } from './screens/AchievementsScreen'
import { HobbiesScreen } from './screens/HobbiesScreen'
import { ScreenInteractive } from './screens/ScreenInteractive'
import { Robot } from './Telephone'
import Hishita from "./assets/Hishita.jpg"






// Remove unused imports to reduce bundle size
THREE.ColorManagement.legacyMode = false

// Create a context for sharing instances
const InstancesContext = createContext()

// Preload and memoize materials
const createMaterial = () => {
    const material = new THREE.MeshBasicMaterial()
    material.toneMapped = false
    return material
}

// Custom hook for screen transitions
const useScreenTransition = (camera) => {
    const handleScreenTransition = useCallback((targetPos, targetRot, targetFov = 45) => {
        gsap.to(camera.position, {
            x: targetPos[0],
            y: targetPos[1],
            z: targetPos[2],
            duration: 1,
            ease: "power2.inOut"
        })

        gsap.to(camera.rotation, {
            x: targetRot[0],
            y: targetRot[1],
            z: targetRot[2],
            duration: 1,
            ease: "power2.inOut"
        })

        gsap.to(camera, {
            fov: targetFov,
            duration: 1,
            ease: "power2.inOut",
            onUpdate: () => camera.updateProjectionMatrix()
        })
    }, [camera])

    return handleScreenTransition
}

// Optimized Instances component
export function Instances({ children, ...props }) {
    const { nodes } = useGLTF('/computers_1-transformed.glb')

    const instances = useMemo(() => ({
        Object: nodes.Object_4,
        Object1: nodes.Object_16,
        Object3: nodes.Object_52,
        Object13: nodes.Object_172,
        Object14: nodes.Object_174,
        Object23: nodes.Object_22,
        Object24: nodes.Object_26,
        Object32: nodes.Object_178,
        Object36: nodes.Object_28,
        Object45: nodes.Object_206,
        Object46: nodes.Object_207,
        Object47: nodes.Object_215,
        Object48: nodes.Object_216,
        Sphere: nodes.Sphere
    }), [nodes])

    return (
        <Merged castShadow receiveShadow meshes={instances} {...props}>
            {(instances) => (
                <InstancesContext.Provider value={instances}>
                    {children}
                </InstancesContext.Provider>
            )}
        </Merged>
    )
}

// Optimized LED component with instance reuse
function Leds() {
    const ref = useRef()
    const instances = useContext(InstancesContext)
    const sphereMaterial = useMemo(() => createMaterial(), [])

    const positions = useMemo(() => [
        [-0.41, 1.1, -2.21],
        [0.59, 1.32, -2.22],
        [1.77, 1.91, -1.17],
        [2.44, 1.1, -0.79],
        [4.87, 3.8, -0.1],
        [1.93, 3.8, -3.69],
        [-2.35, 3.8, -3.48],
        [-4.71, 4.59, -1.81],
        [-3.03, 2.85, 1.19],
        [-1.21, 1.73, -1.49]
    ], [])

    useFrame((state) => {
        ref.current.children.forEach((instance, i) => {
            const rand = Math.abs(2 + positions[i][0])
            const t = Math.round((1 + Math.sin(rand * 10000 + state.clock.elapsedTime * rand)) / 2)
            instance.color.setRGB(0, t * 1.1, t)
        })
    })

    return (
        <group ref={ref}>
            {positions.map((pos, i) => (
                <instances.Sphere
                    key={i}
                    position={pos}
                    scale={0.005}
                    color={[1, 2, 1]}
                    material={sphereMaterial}
                />
            ))}
        </group>
    )
}

// Main Computers component with optimizations
export function Computers(props) {
    const { nodes:n, materials:m } = useGLTF('/computers_1-transformed.glb')
    const instances = useContext(InstancesContext)
    const { camera } = useThree()


    //     useEffect(() => {
    //     const gui = new dat.GUI();

    //     // Add camera position controls
    //     const cameraFolder = gui.addFolder('Camera');
    //     cameraFolder.add(camera.position, 'x', -5, 5, 0.1).name('Position X');
    //     cameraFolder.add(camera.position, 'y', -10, 10, 0.1).name('Position Y');
    //     cameraFolder.add(camera.position, 'z', -5, 10, 0.1).name('Position Z');

    //     // Add camera rotation controls
    //     cameraFolder.add(camera.rotation, 'x', -Math.PI, Math.PI, 0.1).name('Rotation X').listen();
    //     cameraFolder.add(camera.rotation, 'y', -Math.PI, Math.PI, 0.1).name('Rotation Y').listen();
    //     cameraFolder.add(camera.rotation, 'z', -Math.PI, Math.PI, 0.1).name('Rotation Z').listen();

    //     // Add camera FOV control
    //     cameraFolder.add(camera, 'fov', 0, 120).name('FOV').onChange(() => {
    //         camera.updateProjectionMatrix();
    //     });

    //     cameraFolder.open();

    //     return () => {
    //         gui.destroy(); // Clean up on unmount
    //     };
    // }, [camera]);

    const handleScreenTransition = useScreenTransition(camera)

    const handleClick =useCallback((event, targetPos, targetRot, targetFov = 45, screenName, mobileTargetPos, mobileTargetRot, mobileTargetFov) => {
        event.stopPropagation()
        const isMobile = window.innerWidth <= 768
        console.log(mobileTargetPos, mobileTargetRot, mobileTargetFov)
        const finalTargetPos = isMobile && mobileTargetPos ? mobileTargetPos : targetPos
        const finalTargetRot = isMobile && mobileTargetRot ? mobileTargetRot : targetRot
        const finalTargetFov = isMobile && mobileTargetFov ? mobileTargetFov : targetFov

        // const finalTargetPos = [1.1,0.2,0.9]
        // const finalTargetRot = [0,1.3,0]
        // const finalTargetFov = 20

        console.log(finalTargetPos, finalTargetRot, finalTargetFov)

        handleScreenTransition(finalTargetPos, finalTargetRot, finalTargetFov)
        window.dispatchEvent(new CustomEvent('changeScreen', {
            detail: { position: finalTargetPos, rotation: finalTargetRot, fov: finalTargetFov,screenName: screenName}
        }))
    }, [handleScreenTransition])

    useEffect(() => {
                const handleScreenChange = (event) => {
                    const { position, rotation, fov } = event.detail;
                    console.log(position,rotation,fov)

                    console.log(camera.position)
        
                    // Animate camera position
                    gsap.to(camera.position, {
                        x: position[0],
                        y: position[1],
                        z: position[2],
                        duration: 1,
                        ease: "power2.inOut"
                    });

                    // console.log("Camera Pos",camera.po)
        
                    // Animate camera rotation
                    gsap.to(camera.rotation, {
                        x: rotation[0],
                        y: rotation[1],
                        z: rotation[2],
                        duration: 1,
                        ease: "power2.inOut"
                    });
        
                    // Animate camera FOV
                    gsap.to(camera, {
                        fov: fov,
                        duration: 1,
                        ease: "power2.inOut",
                        onUpdate: () => {
                            camera.updateProjectionMatrix();
                        }
                    });
                };
        
                window.addEventListener('changeScreen', handleScreenChange);
                return () => window.removeEventListener('changeScreen', handleScreenChange);
            }, [camera]);


            // useEffect(() => {
            //     const gui = new dat.GUI();

            //     // Add camera position controls
            //     const cameraFolder = gui.addFolder('Camera');
            //     cameraFolder.add(camera.position, 'x', -5, 5, 0.1).name('Position X');
            //     cameraFolder.add(camera.position, 'y', -10, 10, 0.1).name('Position Y');
            //     cameraFolder.add(camera.position, 'z', -5, 10, 0.1).name('Position Z');

            //     // Add camera rotation controls
            //     cameraFolder.add(camera.rotation, 'x', -Math.PI, Math.PI, 0.1).name('Rotation X').listen();
            //     cameraFolder.add(camera.rotation, 'y', -Math.PI, Math.PI, 0.1).name('Rotation Y').listen();
            //     cameraFolder.add(camera.rotation, 'z', -Math.PI, Math.PI, 0.1).name('Rotation Z').listen();

            //     // Add camera FOV control
            //     cameraFolder.add(camera, 'fov', 0, 120).name('FOV').onChange(() => {
            //         camera.updateProjectionMatrix();
            //     });

            //     cameraFolder.open();

            //     return () => {
            //         gui.destroy(); // Clean up on unmount
            //     };
            // }, [camera]);

    // Use React.memo for screen components to prevent unnecessary rerenders
    const screenComponents = useMemo(() => ({
        AboutScreen: React.memo(AboutScreen),
        ProjectScreen: React.memo(ProjectScreen),
        ServicesScreen: React.memo(ServicesScreen),
        ExperienceScreen: React.memo(ExperienceScreen),
        AchievementsScreen: React.memo(AchievementsScreen),
        HobbiesScreen: React.memo(HobbiesScreen),
        ScreenText: React.memo(ScreenText),
        ScreenInteractive: React.memo(ScreenInteractive)
    }), [])

    return (
        <group {...props} dispose={null}>
            <instances.Object position={[0.16, 0.79, -1.97]} rotation={[-0.54, 0.93, -1.12]} scale={0.5} />
            <instances.Object position={[-2.79, 0.27, 1.82]} rotation={[-1.44, 1.22, 1.43]} scale={0.5} />
            <instances.Object position={[-5.6, 4.62, -0.03]} rotation={[-1.96, 0.16, 1.2]} scale={0.5} />
            <instances.Object position={[2.62, 1.98, -2.47]} rotation={[-0.42, -0.7, -1.85]} scale={0.5} />
            <instances.Object position={[4.6, 3.46, 1.19]} rotation={[-1.24, -0.72, 0.48]} scale={0.5} />
            <instances.Object1 position={[0.63, 0, -3]} rotation={[0, 0.17, 0]} scale={1.52} />
            <instances.Object1 position={[-2.36, 0.32, -2.02]} rotation={[0, 0.53, -Math.PI / 2]} scale={1.52} />
            <mesh castShadow receiveShadow geometry={n.Object_24.geometry} material={m.Texture} position={[-2.42, 0.94, -2.25]} rotation={[0, 0.14, Math.PI / 2]} scale={-1.52} />
            <instances.Object1 position={[-3.53, 0, 0.59]} rotation={[Math.PI, -1.09, Math.PI]} scale={1.52} />
            <instances.Object1 position={[-3.53, 1.53, 0.59]} rotation={[0, 0.91, 0]} scale={1.52} />
            <instances.Object1 position={[3.42, 0, 0]} rotation={[-Math.PI, 1.13, -Math.PI]} scale={1.52} />
            <instances.Object1 position={[4.09, 2.18, 2.41]} rotation={[0, -1.55, 1.57]} scale={1.52} />
            <instances.Object3 position={[4.31, 1.57, 2.34]} rotation={[0, -1.15, -Math.PI / 2]} scale={-1.52} />
            <instances.Object3 position={[-3.79, 0, 1.66]} rotation={[Math.PI, -1.39, 0]} scale={-1.52} />
            <instances.Object3 position={[-3.79, 1.53, 1.66]} rotation={[0, 1.22, -Math.PI]} scale={-1.52} />
            <instances.Object1 position={[-3.69, 0, 2.59]} rotation={[0, -1.57, 0]} scale={1.52} />
            <instances.Object1 position={[-5.36, 2.18, 0.81]} rotation={[0, 0.77, Math.PI / 2]} scale={1.52} />
            <instances.Object3 position={[-5.56, 1.57, 0.69]} rotation={[0, 1.17, -Math.PI / 2]} scale={-1.52} />
            <instances.Object1 position={[-5.47, 2.79, 0.74]} rotation={[Math.PI, -1.16, Math.PI / 2]} scale={1.52} />
            <instances.Object3 position={[-5.29, 3.41, 0.89]} rotation={[Math.PI, -0.76, -Math.PI / 2]} scale={-1.52} />
            <instances.Object1 position={[-5.28, 0, -2.33]} rotation={[0, 0.75, 0]} scale={1.52} />
            <instances.Object1 position={[-5.49, 0, -1.38]} rotation={[Math.PI, -0.99, Math.PI]} scale={1.52} />
            <instances.Object1 position={[-3.01, 0, -3.79]} rotation={[0, 0.6, 0]} scale={1.52} />
            <instances.Object1 position={[-2.08, 0, -4.32]} rotation={[Math.PI, -0.6, Math.PI]} scale={1.52} />
            <instances.Object1 position={[-1.02, 0, -4.49]} rotation={[0, 0.31, 0]} scale={1.52} />
            <instances.Object1 position={[-5.31, 1.83, -1.41]} rotation={[0, 1.06, Math.PI / 2]} scale={1.52} />
            <instances.Object1 position={[-4.18, 1.83, -3.06]} rotation={[-Math.PI, -0.46, -Math.PI / 2]} scale={1.52} />
            <instances.Object1 position={[-1.76, 1.83, -3.6]} rotation={[0, -1.16, Math.PI / 2]} scale={1.52} />
            <instances.Object1 position={[-0.25, 1.83, -5.54]} rotation={[0, 1.55, 1.57]} scale={1.52} />
            <instances.Object1 position={[-5.28, 2.14, -2.33]} rotation={[Math.PI, -0.75, Math.PI]} scale={1.52} />
            <instances.Object1 position={[-5.49, 2.14, -1.38]} rotation={[0, 0.99, 0]} scale={1.52} />
            <instances.Object1 position={[-3.01, 2.14, -3.79]} rotation={[Math.PI, -0.6, Math.PI]} scale={1.52} />
            <instances.Object1 position={[-2.08, 2.14, -4.32]} rotation={[0, 0.6, 0]} scale={1.52} />
            <instances.Object1 position={[-1.02, 2.14, -4.49]} rotation={[Math.PI, -0.31, Math.PI]} scale={1.52} />
            <instances.Object1 position={[-5.31, 3.98, -1.41]} rotation={[0, 1.06, Math.PI / 2]} scale={1.52} />
            <instances.Object1 position={[-4.18, 3.98, -3.06]} rotation={[-Math.PI, -0.46, -Math.PI / 2]} scale={1.52} />
            <instances.Object1 position={[-1.17, 3.98, -4.45]} rotation={[0, 0.17, Math.PI / 2]} scale={1.52} />
            <instances.Object1 position={[-0.94, 3.98, -4.66]} rotation={[Math.PI, 0.02, -Math.PI / 2]} scale={1.52} />
            <mesh castShadow receiveShadow geometry={n.Object_140.geometry} material={m.Texture} position={[5.53, 2.18, 0.17]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_144.geometry} material={m.Texture} position={[5.74, 1.57, 0.05]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_148.geometry} material={m.Texture} position={[5.65, 2.79, 0.11]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_152.geometry} material={m.Texture} position={[5.46, 3.41, 0.26]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_156.geometry} material={m.Texture} position={[4.86, 0, -2.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_160.geometry} material={m.Texture} position={[5.06, 0, -1.6]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_164.geometry} material={m.Texture} position={[2.59, 0, -4]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_168.geometry} material={m.Texture} position={[1.66, 0, -4.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_170.geometry} material={m.Texture} position={[0.59, 0, -4.7]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <instances.Object13 position={[4.89, 1.83, -1.62]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <instances.Object14 position={[3.75, 1.83, -3.28]} rotation={[-Math.PI, 0, 0]} scale={-1} />            <mesh castShadow receiveShadow geometry={n.Object_176.geometry} material={m.Texture} position={[1.33, 1.83, -3.82]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_180.geometry} material={m.Texture} position={[4.86, 2.14, -2.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_184.geometry} material={m.Texture} position={[5.06, 2.14, -1.6]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_188.geometry} material={m.Texture} position={[2.59, 2.14, -4]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_192.geometry} material={m.Texture} position={[1.66, 2.14, -4.54]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_194.geometry} material={m.Texture} position={[0.59, 2.14, -4.7]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <instances.Object13 position={[4.89, 3.98, -1.62]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <instances.Object14 position={[3.75, 3.98, -3.28]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_200.geometry} material={m.Texture} position={[0.75, 3.98, -4.66]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_18.geometry} material={m.Texture} position={[-0.19, 0, -2.96]} rotation={[0, -0.06, 0]} scale={1.52} />
            <instances.Object23 position={[-2.29, 1.56, -2.26]} rotation={[0, -0.005, -Math.PI / 2]} scale={1.52} />
            <instances.Object24 position={[-2.19, 2.19, -1.87]} rotation={[0, 0.51, Math.PI / 2]} scale={-1.52} />
            <instances.Object23 position={[-2.9, 0.3, -1.47]} rotation={[Math.PI, -1.35, Math.PI / 2]} scale={1.52} />             <instances.Object23 position={[3.22, 0, -0.8]} rotation={[0, -1.32, 0]} scale={1.52} />
            <instances.Object23 position={[3.53, 1.83, 0.44]} rotation={[-Math.PI, 1.32, Math.PI / 2]} scale={1.52} />
            <instances.Object23 position={[4.26, 0.94, 2.22]} rotation={[0, -1, Math.PI / 2]} scale={1.52} />
            <instances.Object24 position={[3.87, 0.32, 2.35]} rotation={[0, -1.53, -1.57]} scale={-1.52} />
            <instances.Object23 position={[-5.61, 0.94, 0.82]} rotation={[0, 1.32, 1.57]} scale={1.52} />
            <instances.Object24 position={[-5.26, 0.32, 1.01]} rotation={[0, 0.79, -Math.PI / 2]} scale={-1.52} />
            <instances.Object23 position={[-5.39, 4.03, 0.99]} rotation={[Math.PI, -0.61, Math.PI / 2]} scale={1.52} />
            <instances.Object24 position={[-5.7, 4.66, 0.72]} rotation={[Math.PI, -1.13, -Math.PI / 2]} scale={-1.52} />
            <instances.Object23 position={[-5.95, 0, -0.64]} rotation={[0, 0.95, 0]} scale={1.52} />
            <instances.Object23 position={[-4.48, 0, -2.75]} rotation={[Math.PI, -0.57, Math.PI]} scale={1.52} />
            <instances.Object23 position={[-3.72, 0, -2.89]} rotation={[0, 0.64, 0]} scale={1.52} />
            <instances.Object23 position={[-0.08, 0, -5.03]} rotation={[Math.PI, -0.04, Math.PI]} scale={1.52} />
            <instances.Object24 position={[-4.19, 1.84, -2.77]} rotation={[Math.PI, -0.66, -Math.PI / 2]} scale={-1.52} />
            <instances.Object23 position={[-5.95, 2.14, -0.64]} rotation={[Math.PI, -0.95, Math.PI]} scale={1.52} />
            <instances.Object23 position={[-4.48, 2.14, -2.75]} rotation={[0, 0.57, 0]} scale={1.52} />
            <instances.Object23 position={[-3.73, 2.14, -3.1]} rotation={[Math.PI, -0.64, Math.PI]} scale={1.52} />
            <instances.Object23 position={[-0.08, 2.14, -5.03]} rotation={[0, 0.04, 0]} scale={1.52} />
            <instances.Object24 position={[-4.19, 3.98, -2.77]} rotation={[Math.PI, -0.66, -Math.PI / 2]} scale={-1.52} />
            <mesh castShadow receiveShadow geometry={n.Object_142.geometry} material={m.Texture} position={[5.79, 0.94, 0.18]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_146.geometry} material={m.Texture} position={[5.43, 0.32, 0.37]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_150.geometry} material={m.Texture} position={[5.56, 4.03, 0.35]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_154.geometry} material={m.Texture} position={[5.87, 4.66, 0.08]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_158.geometry} material={m.Texture} position={[5.53, 0, -0.85]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_162.geometry} material={m.Texture} position={[4.05, 0, -2.96]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_166.geometry} material={m.Texture} position={[3.29, 0, -3.1]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <instances.Object32 position={[3.77, 1.84, -2.98]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_182.geometry} material={m.Texture} position={[5.53, 2.14, -0.85]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_186.geometry} material={m.Texture} position={[4.05, 2.14, -2.96]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <mesh castShadow receiveShadow geometry={n.Object_190.geometry} material={m.Texture} position={[3.3, 2.14, -3.31]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <instances.Object32 position={[3.77, 3.98, -2.98]} rotation={[-Math.PI, 0, 0]} scale={-1} />
            <instances.Object36 position={[0.35, 2.35, -3.34]} rotation={[-0.26, 0, 0]} />
            <instances.Object36 position={[0.18, 2.8, -2.85]} rotation={[0.09, 0.15, -0.005]} />
            <instances.Object36 position={[1.89, 0, -1.94]} rotation={[0, -0.44, 0]} scale={[1.5, 1, 1.5]} />
            <instances.Object36 position={[1.86, 1.61, -1.81]} rotation={[0, -Math.PI / 3, 0]} />
            <instances.Object36 position={[3.95, 2.49, 1.61]} rotation={[0, -Math.PI / 3, 0]} />
            <instances.Object36 position={[-1.1, 4.29, -4.43]} rotation={[0, 0.36, 0]} />
            <instances.Object36 position={[-5.25, 4.29, -1.47]} rotation={[0, 1.25, 0]} />
            <mesh castShadow receiveShadow geometry={n.Object_204.geometry} material={m.Texture} position={[3.2, 4.29, -3.09]} rotation={[-Math.PI, 0.56, 0]} scale={-1} />
            <AboutScreen
                frame="Object_206"
                panel="Object_207"
                position={[0.27, 1.53, -2.61]}
                onClick={(e) => {
                    handleClick(
                        e, 
                        [0.1, 0.1, 0.89],   // targetPos
                        [0, -0.01, 0],      // targetRot
                        32,                 // targetFov
                        "About",            // screenName
                        [0.1,-0.2,6.5],
                        [0,0,0],
                        9                 // mobileTargetFov
                    );
                }}
                htmlPos={[0.3, -0.3, 2.5]}
                mobileHtmlPos={[-0.1, -0.6, -2.1]}
                mobileHtmlRot={[0, 0, 0]}
                mobileHtmlScale={0.7}
          
                images={{ Hishita: Hishita }} 
            />

            <ProjectScreen
                frame="Object_209"
                panel="Object_210"
                y={5}
                position={[-1.43, 2.5, -1.8]}
                rotation={[0, 1, 0]}
                onClick={(e) => handleClick(e, [0.4, 0.6, 0.8], [0, 1, 0], 30, 'Projects',[1.4,0.1,1.6],[0,1,0],28)}
                htmlPos={[-0.2, -0.6, 0]}
                htmlRot={[0, 0, 0]}
                mobileHtmlPos={[0.1, -0.1, -2]}
                mobileHtmlRot={[0, 0, 0]}
                mobileHtmlScale={0.5}
            />

            <ServicesScreen
                invert
                frame="Object_212"
                panel="Object_213"
                x={-5}
                y={5}
                position={[-2.73, 0.63, -0.52]}
                rotation={[0, 1.09, 0]}
                onClick={(e) => handleClick(e, [-0.1, -0.4, 1.4], [0, 1.09, 0], 30, 'Services',[0.2,-0.6,1.5],[0,1,0],49)}
                htmlPos={[0, 0.2, 1.4]}
                htmlRot={[0, 0, 0]}
                htmlScale={1}
                mobileHtmlPos={[-0.4, 0.3, -0.1]}
                mobileHtmlRot={[0, 0.1, 0]}
                mobileHtmlScale={0.5}
            />

            <ExperienceScreen
                frame="Object_215"
                panel="Object_216"
                position={[1.84, 0.38, -1.77]} rotation={[0, -Math.PI / 9, 0]}
                onClick={(e) => handleClick(e, [0.4, -0.5, 1.5], [0, -0.4, 0], 30, 'Experience',[-1.9,-0.6,6.5],[0,-0.4,0],10)}
                htmlPos={[-0.6, 0, 1.8]}
                htmlRot={[0, 0, 0]}
                mobileHtmlPos={[-0.4, -0.5, -2.2]}
                mobileHtmlRot={[0, 0, 0]}
                mobileHtmlScale={0.7}
            />

            <AchievementsScreen
                frame="Object_218"
                panel="Object_219"
                x={-5} position={[3.11, 2.15, -0.18]} rotation={[0, -0.79, 0]} scale={0.81}
                onClick={(e) => handleClick(e, [0.4, 0.3, 2.1], [0, -0.8, 0], 20, 'Achievements',[0, -0.2, 1.8],    // mobileTargetPos
                    [0, -0.9, 0],        // mobileTargetRot
                    32 )}
                htmlPos={[-0.7, 0.3, 1.7]}
                htmlRot={[0, 0, 0]}
                mobileHtmlPos={[0.1, 2.1, -3]}
                mobileHtmlRot={[0, 0, 0]}
                mobileHtmlScale={0.8}
                images={{ Hishita: Hishita }} 
            />

            <HobbiesScreen
                frame="Object_221"
                panel="Object_222"
                y={5} position={[-3.42, 3.06, 1.3]} rotation={[0, 1.22, 0]} scale={0.9}
                onClick={(e) => handleClick(e, [-0.2, 0.8, 2.1], [0, 1.3, 0], 23, 'Hobbies',[1.1, 0.3, 2.1],    // mobileTargetPos
                    [0, 1.3, 0],        // mobileTargetRot
                    24 )}
                htmlPos={[0.4, 0.1, 0]}
                htmlRot={[0, 0, 0]}
                htmlScale={1.2}
                mobileHtmlPos={[0, -0.3, 0.4]}
                mobileHtmlRot={[0, 0, 0]}
                mobileHtmlScale={0.5}
            />

            <ScreenText
                frame="Object_224"
                panel="Object_225"
                position={[-3.9, 4.29, -2.64]}
                rotation={[0, 0.54, 0]}
                onClick={(e) => handleClick(e, [-1, 1.5, 1.5], [0, 0.5, 0], 20, 'ScreenText')}
            />

            <ScreenInteractive
                frame="Object_227"
                panel="Object_228"
                position={[0.96, 4.28, -4.2]}
                rotation={[0, -0.65, 0]}
                onClick={(e) => handleClick(e, [0.4, 1.4, 0.2], [0, -0.1, 0], 31, 'ScreenInteractive')}
            />

            <ScreenText
                frame="Object_230"
                panel="Object_231"
                position={[4.68, 4.29, -1.56]}
                rotation={[0, -Math.PI / 3, 0]}
                onClick={(e) => handleClick(e, [-1.3, 1.4, 2.1], [0, -1.1, 0], 10, 'ScreenText')}
            />

            {/* Your existing mesh instances here */}
            <Leds />
            <Robot
                position={[0.1, 0.2, 1]}
                scale={0.9}
                rotation={[0, 0, 0]}
            />
        </group>
    )
}

// Clean up resources when component unmounts
useGLTF.preload('/computers_1-transformed.glb')

